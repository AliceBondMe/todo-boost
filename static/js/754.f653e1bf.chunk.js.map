{"version":3,"file":"static/js/754.f653e1bf.chunk.js","mappings":"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","sources":["components/Auth/AuthForm.tsx","pages/AuthPage.tsx","pages/Pages.styled.tsx"],"sourcesContent":["import * as yup from \"yup\";\nimport { ErrorMessage, Formik, FormikHelpers } from \"formik\";\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { auth, db } from \"../../firebase\";\nimport { FC, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"../../redux/slices/authSlice\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport { AppDispatch } from \"../../redux/store\";\nimport {\n  Button,\n  ErrorsBlock,\n  FieldStyled,\n  FormStyled,\n  Header,\n} from \"./Auth.styled\";\n\nexport interface UserAuthData {\n  email: string;\n  password: string;\n}\n\nconst initialValues: UserAuthData = {\n  email: \"\",\n  password: \"\",\n};\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"Please enter valid email\")\n    .required(\"An email is required\"),\n  password: yup\n    .string()\n    .min(5, \"Password must contain 5 or more characters\")\n    .required(\"A password is required\"),\n});\n\nexport const AuthForm: FC<{ isLogin: boolean }> = ({ isLogin }) => {\n  const [isError, setIsError] = useState(false);\n  const dispatch: AppDispatch = useDispatch();\n\n  const handleSubmit = async (\n    { email, password }: UserAuthData,\n    { resetForm }: FormikHelpers<UserAuthData>\n  ) => {\n    try {\n      const userCredential = isLogin\n        ? await signInWithEmailAndPassword(auth, email, password)\n        : await createUserWithEmailAndPassword(auth, email, password);\n\n      const user = userCredential.user;\n\n      console.log(\"user: \", user);\n\n      dispatch(\n        login({\n          email,\n          id: user.uid,\n          token: user.refreshToken,\n        })\n      );\n\n      if (!isLogin) {\n        await setDoc(doc(db, \"users\", user.uid), {\n          email,\n          uid: user.uid,\n        });\n      }\n    } catch {\n      setIsError(true);\n    }\n\n    resetForm();\n  };\n\n  return (\n    <>\n      <Header>{isLogin ? \"Sign in now\" : \"Sign up now\"}</Header>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <FormStyled>\n          <FieldStyled type=\"email\" name=\"email\" placeholder=\"Email\" required />\n          <FieldStyled\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            required\n          />\n\n          <Button type=\"submit\">{isLogin ? \"Log in\" : \"Register\"}</Button>\n\n          <ErrorsBlock>\n            <ErrorMessage name=\"email\" component=\"div\" />\n            <ErrorMessage name=\"password\" component=\"div\" />\n          </ErrorsBlock>\n        </FormStyled>\n      </Formik>\n\n      {isError && (\n        <p>Something went wrong with your authentification. Please try again</p>\n      )}\n    </>\n  );\n};\n","import { AuthForm } from \"../components/Auth/AuthForm\";\nimport { useState } from \"react\";\nimport womanImage from \"../assets/images/woman-paper-calendar.png\";\nimport { Container, MessageBlock } from \"./Pages.styled\";\n\nconst RegisterPage = () => {\n  const [isLogin, setIsLogin] = useState(true);\n\n  const toggleAuthType = () => {\n    setIsLogin((prev) => !prev);\n  };\n\n  return (\n    <Container>\n      <img src={womanImage} alt=\"Woman with schedule\" />\n      <div>\n        <AuthForm isLogin={isLogin} />\n        <MessageBlock>\n          <p>{isLogin ? \"Not registered?\" : \"Already have an account?\"}</p>\n          <button onClick={toggleAuthType}>\n            {isLogin ? \"Sign up\" : \"Sign in\"}\n          </button>\n        </MessageBlock>\n      </div>\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n\n  & img {\n    height: 75vh;\n    width: auto;\n  }\n`;\n\nexport const MessageBlock = styled.div`\n  display: flex;\n  justify-content: center;\n\n  & button {\n    color: var(--bg-accent-dark);\n    font-weight: bold;\n  }\n`;\n\nexport const Header = styled.h2`\n  margin-left: 48px;\n  margin-bottom: 24px;\n`;\n\nexport const HomeTextBlock = styled.div`\n  width: 500px;\n`;\n\nexport const HeaderNotFound = styled.h5`\n  font-size: 36px;\n  width: 400px;\n`;\n"],"names":["initialValues","email","password","validationSchema","yup","shape","required","min","AuthForm","_ref","isLogin","isError","setIsError","useState","dispatch","useDispatch","_jsxs","_Fragment","children","_jsx","Header","Formik","onSubmit","async","_ref2","_ref3","resetForm","user","signInWithEmailAndPassword","auth","createUserWithEmailAndPassword","console","log","login","id","uid","token","refreshToken","setDoc","doc","db","FormStyled","FieldStyled","type","name","placeholder","Button","ErrorsBlock","ErrorMessage","component","RegisterPage","setIsLogin","Container","src","womanImage","alt","MessageBlock","onClick","toggleAuthType","prev","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","h2","_templateObject3","HomeTextBlock","_templateObject4","HeaderNotFound","h5","_templateObject5"],"sourceRoot":""}