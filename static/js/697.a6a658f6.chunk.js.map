{"version":3,"file":"static/js/697.a6a658f6.chunk.js","mappings":"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","sources":["components/AddTodo/AddTodoModal.styled.jsx","helpers/formatDate.ts","components/AddTodo/AddTodoModal.tsx","components/TodoCard/TodoCard.tsx","components/TodoList/TodoList.tsx","hooks/useShowModal.ts","pages/CompletedPage.tsx"],"sourcesContent":["import { fadeInScale } from \"../../assets/styles/GlobalStyles\";\nimport styled from \"styled-components\";\n\nexport const ModalContainer = styled.div`\n  width: 90%;\n  max-height: 90vh;\n  border-radius: 20px;\n  overflow-y: scroll;\n  scroll-behavior: smooth;\n  padding: 12px;\n  background-color: #ffffff;\n  animation: ${fadeInScale} 700ms ease-in-out;\n`;\n\nexport const Backdrop = styled.div`\n  z-index: 1200;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--backdrop);\n`;\n","export const formatDate = (deadline: Date | undefined): string => {\n  if (!deadline) return \"\";\n  const day = deadline.getDate().toString().padStart(2, \"0\");\n  const month = (deadline.getMonth() + 1).toString().padStart(2, \"0\");\n  const year = deadline.getFullYear().toString();\n  const formattedDate = `${day}/${month}/${year}`;\n  return formattedDate;\n};\n\nexport const formatDateToObject = (\n  deadline: string | undefined\n): Date | undefined => {\n  if (deadline === \"\" || !deadline) return undefined;\n  const [day, month, year] = deadline.split(\"/\");\n  const dateObject = new Date(Number(year), Number(month) - 1, Number(day));\n  return dateObject;\n};\n","import { FC, SyntheticEvent, useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { Backdrop } from \"./AddTodoModal.styled\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../../redux/selectors\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport ReactDatePicker from \"react-datepicker\";\nimport { AppDispatch } from \"../../redux/store\";\nimport { addTodo, editTodo } from \"../../redux/operations\";\nimport { formatDate, formatDateToObject } from \"../../helpers/formatDate\";\n\nconst modalRoot = document.querySelector(\"#modal-root\") as HTMLElement;\n\nexport interface TodoDataOut {\n  title: string;\n  text: string;\n  deadline: Date | undefined;\n}\n\ninterface AddTodoModalProps {\n  closeModal: () => void;\n  isEdit?: boolean;\n  todoId?: string;\n  title?: string;\n  text?: string;\n  deadline?: string;\n}\n\nconst validationSchema = yup.object().shape({\n  title: yup\n    .string()\n    .min(3)\n    .max(100)\n    .required(\"A Title for new task is required\"),\n  deadline: yup.date().required(\"A deadline is required\"),\n  text: yup.string().max(500),\n});\n\nexport const AddTodoModal: FC<AddTodoModalProps> = ({\n  closeModal,\n  isEdit = false,\n  todoId,\n  title,\n  text,\n  deadline,\n}) => {\n  const dispatch: AppDispatch = useDispatch();\n  const { id: userId } = useSelector(selectUser);\n\n  const handleBackdropClose = (e: SyntheticEvent) => {\n    if (e.target === e.currentTarget) {\n      closeModal();\n    }\n  };\n\n  useEffect(() => {\n    const handleCloseByEsc = (e: KeyboardEvent) => {\n      if (e.code === \"Escape\") {\n        closeModal();\n      }\n    };\n    window.addEventListener(\"keydown\", handleCloseByEsc);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleCloseByEsc);\n    };\n  }, [closeModal]);\n\n  const handleSubmit = async (todoData: TodoDataOut) => {\n    const todoPayload = {\n      userId,\n      todo: {\n        ...todoData,\n        deadline: formatDate(todoData.deadline),\n        completed: false,\n        id: isEdit ? (todoId as string) : nanoid(),\n      },\n    };\n\n    isEdit ? dispatch(editTodo(todoPayload)) : dispatch(addTodo(todoPayload));\n\n    closeModal();\n  };\n\n  const initialValues: TodoDataOut = {\n    title: isEdit ? (title as string) : \"\",\n    text: isEdit ? (text as string) : \"\",\n    deadline: isEdit ? formatDateToObject(deadline) : undefined,\n  };\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClose}>\n      <button\n        type=\"button\"\n        aria-label=\"close modal window\"\n        onClick={closeModal}\n      >\n        x\n      </button>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ setFieldValue, values }) => (\n          <Form>\n            <Field type=\"text\" name=\"title\" placeholder=\"Title\" required />\n            <Field type=\"text\" name=\"text\" placeholder=\"Description\" />\n            <ReactDatePicker\n              name=\"deadline\"\n              placeholderText=\"Deadline\"\n              selected={values.deadline}\n              onChange={(date) => setFieldValue(\"deadline\", date)}\n              autoComplete=\"off\"\n              dateFormat=\"dd/MM/yyyy\"\n              calendarStartDay={1}\n              required\n            />\n\n            <button type=\"submit\">\n              {isEdit ? \"Edit task\" : \"Create new task\"}\n            </button>\n\n            <ErrorMessage name=\"title\" component=\"div\" />\n            <ErrorMessage name=\"text\" component=\"div\" />\n            <ErrorMessage name=\"deadline\" component=\"div\" />\n          </Form>\n        )}\n      </Formik>\n    </Backdrop>,\n    modalRoot\n  );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { TodoData } from \"../../redux/slices/todosSlice\";\nimport { useShowModal } from \"../../hooks/useShowModal\";\nimport { AddTodoModal } from \"../AddTodo/AddTodoModal\";\nimport {\n  MdOutlineCheckBox,\n  MdOutlineCheckBoxOutlineBlank,\n} from \"react-icons/md\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch } from \"../../redux/store\";\nimport { deleteTodo, editTodoStatus } from \"../../redux/operations\";\nimport { selectUser } from \"../../redux/selectors\";\n\nexport const TodoCard: FC<TodoData> = ({\n  id,\n  title,\n  text,\n  deadline,\n  completed,\n}) => {\n  const { isShowModal, openModal, closeModal } = useShowModal();\n  const [isCompleted, setIsCompleted] = useState(completed);\n  const { id: userId } = useSelector(selectUser);\n  const dispatch: AppDispatch = useDispatch();\n\n  const handleComplete = () => {\n    setIsCompleted((prev) => !prev);\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteTodo({ id, userId }));\n  };\n\n  useEffect(() => {\n    dispatch(editTodoStatus({ todo: { id, completed: isCompleted }, userId }));\n  }, [dispatch, isCompleted, id, userId]);\n\n  return (\n    <>\n      <li>\n        <h6>{title}</h6>\n        <p>{text}</p>\n        <p>{deadline}</p>\n        <p>{isCompleted ? \"completed\" : \"active\"}</p>\n        <button\n          type=\"button\"\n          aria-label=\"toggle complete task\"\n          onClick={handleComplete}\n        >\n          {isCompleted ? (\n            <MdOutlineCheckBox />\n          ) : (\n            <MdOutlineCheckBoxOutlineBlank />\n          )}\n        </button>\n        <button type=\"button\" onClick={openModal}>\n          Edit task\n        </button>\n        <button type=\"button\" onClick={handleDelete}>\n          Delete task\n        </button>\n      </li>\n\n      {isShowModal && (\n        <AddTodoModal\n          closeModal={closeModal}\n          isEdit\n          todoId={id}\n          title={title}\n          text={text}\n          deadline={deadline}\n        />\n      )}\n    </>\n  );\n};\n","import { FC } from \"react\";\nimport { TodoData } from \"../../redux/slices/todosSlice\";\nimport { TodoCard } from \"../TodoCard/TodoCard\";\n\ninterface ListProps {\n  todos: TodoData[];\n}\n\nexport const TodoList: FC<ListProps> = ({ todos }) => {\n  return (\n    <ul>\n      {todos.map(({ id, title, text, deadline, completed }) => (\n        <TodoCard\n          key={id}\n          id={id}\n          title={title}\n          text={text}\n          deadline={deadline}\n          completed={completed}\n        />\n      ))}\n    </ul>\n  );\n};\n","import { useState } from \"react\";\n\nexport const useShowModal = () => {\n  const [isShowModal, setIsShowModal] = useState(false);\n\n  const openModal: () => void = () => {\n    setIsShowModal(true);\n    document.body.style.overflow = \"hidden\";\n  };\n\n  const closeModal: () => void = () => {\n    setIsShowModal(false);\n    document.body.style.overflow = \"\";\n  };\n\n  return { isShowModal, openModal, closeModal };\n};\n","import { FC } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectCompletedTodos } from \"../redux/selectors\";\nimport { TodoList } from \"../components/TodoList/TodoList\";\n\nconst CompletedPage: FC = () => {\n  const todos = useSelector(selectCompletedTodos);\n\n  return (\n    <>\n      {!todos.length ? (\n        <p>You have no completed tasks yet</p>\n      ) : (\n        <>\n          <h2>Here are all of your completed tasks:</h2>\n          <TodoList todos={todos} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CompletedPage;\n"],"names":["styled","div","_templateObject","_taggedTemplateLiteral","fadeInScale","Backdrop","_templateObject2","formatDate","deadline","day","getDate","toString","padStart","month","getMonth","year","getFullYear","concat","formatDateToObject","split","Date","Number","modalRoot","document","querySelector","validationSchema","yup","shape","title","min","max","required","text","AddTodoModal","_ref","closeModal","isEdit","todoId","dispatch","useDispatch","id","userId","useSelector","selectUser","useEffect","handleCloseByEsc","e","code","window","addEventListener","removeEventListener","initialValues","undefined","createPortal","_jsxs","onClick","target","currentTarget","children","_jsx","type","Formik","onSubmit","async","todoPayload","todo","todoData","completed","nanoid","editTodo","addTodo","_ref2","setFieldValue","values","Form","Field","name","placeholder","ReactDatePicker","placeholderText","selected","onChange","date","autoComplete","dateFormat","calendarStartDay","ErrorMessage","component","TodoCard","isShowModal","openModal","useShowModal","isCompleted","setIsCompleted","useState","editTodoStatus","_Fragment","handleComplete","prev","MdOutlineCheckBox","MdOutlineCheckBoxOutlineBlank","handleDelete","deleteTodo","TodoList","todos","map","setIsShowModal","body","style","overflow","CompletedPage","selectCompletedTodos","length"],"sourceRoot":""}