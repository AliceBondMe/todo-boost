{"version":3,"file":"static/js/697.a6a658f6.chunk.js","mappings":"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","sources":["components/AddTodo/AddTodoModal.styled.jsx","helpers/formatDate.ts","components/AddTodo/AddTodoModal.tsx","components/TodoCard/TodoCard.tsx","components/TodoList/TodoList.tsx","hooks/useShowModal.ts","pages/CompletedPage.tsx"],"sourcesContent":["import { fadeInScale } from \"../../assets/styles/GlobalStyles\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ModalContainer = styled.div`\r\n  width: 90%;\r\n  max-height: 90vh;\r\n  border-radius: 20px;\r\n  overflow-y: scroll;\r\n  scroll-behavior: smooth;\r\n  padding: 12px;\r\n  background-color: #ffffff;\r\n  animation: ${fadeInScale} 700ms ease-in-out;\r\n`;\r\n\r\nexport const Backdrop = styled.div`\r\n  z-index: 1200;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: var(--backdrop);\r\n`;\r\n","export const formatDate = (deadline: Date | undefined): string => {\r\n  if (!deadline) return \"\";\r\n  const day = deadline.getDate().toString().padStart(2, \"0\");\r\n  const month = (deadline.getMonth() + 1).toString().padStart(2, \"0\");\r\n  const year = deadline.getFullYear().toString();\r\n  const formattedDate = `${day}/${month}/${year}`;\r\n  return formattedDate;\r\n};\r\n\r\nexport const formatDateToObject = (\r\n  deadline: string | undefined\r\n): Date | undefined => {\r\n  if (deadline === \"\" || !deadline) return undefined;\r\n  const [day, month, year] = deadline.split(\"/\");\r\n  const dateObject = new Date(Number(year), Number(month) - 1, Number(day));\r\n  return dateObject;\r\n};\r\n","import { FC, SyntheticEvent, useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { Backdrop } from \"./AddTodoModal.styled\";\r\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport * as yup from \"yup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../../redux/selectors\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport { AppDispatch } from \"../../redux/store\";\r\nimport { addTodo, editTodo } from \"../../redux/operations\";\r\nimport { formatDate, formatDateToObject } from \"../../helpers/formatDate\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\") as HTMLElement;\r\n\r\nexport interface TodoDataOut {\r\n  title: string;\r\n  text: string;\r\n  deadline: Date | undefined;\r\n}\r\n\r\ninterface AddTodoModalProps {\r\n  closeModal: () => void;\r\n  isEdit?: boolean;\r\n  todoId?: string;\r\n  title?: string;\r\n  text?: string;\r\n  deadline?: string;\r\n}\r\n\r\nconst validationSchema = yup.object().shape({\r\n  title: yup\r\n    .string()\r\n    .min(3)\r\n    .max(100)\r\n    .required(\"A Title for new task is required\"),\r\n  deadline: yup.date().required(\"A deadline is required\"),\r\n  text: yup.string().max(500),\r\n});\r\n\r\nexport const AddTodoModal: FC<AddTodoModalProps> = ({\r\n  closeModal,\r\n  isEdit = false,\r\n  todoId,\r\n  title,\r\n  text,\r\n  deadline,\r\n}) => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const { id: userId } = useSelector(selectUser);\r\n\r\n  const handleBackdropClose = (e: SyntheticEvent) => {\r\n    if (e.target === e.currentTarget) {\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleCloseByEsc = (e: KeyboardEvent) => {\r\n      if (e.code === \"Escape\") {\r\n        closeModal();\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleCloseByEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleCloseByEsc);\r\n    };\r\n  }, [closeModal]);\r\n\r\n  const handleSubmit = async (todoData: TodoDataOut) => {\r\n    const todoPayload = {\r\n      userId,\r\n      todo: {\r\n        ...todoData,\r\n        deadline: formatDate(todoData.deadline),\r\n        completed: false,\r\n        id: isEdit ? (todoId as string) : nanoid(),\r\n      },\r\n    };\r\n\r\n    isEdit ? dispatch(editTodo(todoPayload)) : dispatch(addTodo(todoPayload));\r\n\r\n    closeModal();\r\n  };\r\n\r\n  const initialValues: TodoDataOut = {\r\n    title: isEdit ? (title as string) : \"\",\r\n    text: isEdit ? (text as string) : \"\",\r\n    deadline: isEdit ? formatDateToObject(deadline) : undefined,\r\n  };\r\n\r\n  return createPortal(\r\n    <Backdrop onClick={handleBackdropClose}>\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"close modal window\"\r\n        onClick={closeModal}\r\n      >\r\n        x\r\n      </button>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {({ setFieldValue, values }) => (\r\n          <Form>\r\n            <Field type=\"text\" name=\"title\" placeholder=\"Title\" required />\r\n            <Field type=\"text\" name=\"text\" placeholder=\"Description\" />\r\n            <ReactDatePicker\r\n              name=\"deadline\"\r\n              placeholderText=\"Deadline\"\r\n              selected={values.deadline}\r\n              onChange={(date) => setFieldValue(\"deadline\", date)}\r\n              autoComplete=\"off\"\r\n              dateFormat=\"dd/MM/yyyy\"\r\n              calendarStartDay={1}\r\n              required\r\n            />\r\n\r\n            <button type=\"submit\">\r\n              {isEdit ? \"Edit task\" : \"Create new task\"}\r\n            </button>\r\n\r\n            <ErrorMessage name=\"title\" component=\"div\" />\r\n            <ErrorMessage name=\"text\" component=\"div\" />\r\n            <ErrorMessage name=\"deadline\" component=\"div\" />\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Backdrop>,\r\n    modalRoot\r\n  );\r\n};\r\n","import { FC, useEffect, useState } from \"react\";\r\nimport { TodoData } from \"../../redux/slices/todosSlice\";\r\nimport { useShowModal } from \"../../hooks/useShowModal\";\r\nimport { AddTodoModal } from \"../AddTodo/AddTodoModal\";\r\nimport {\r\n  MdOutlineCheckBox,\r\n  MdOutlineCheckBoxOutlineBlank,\r\n} from \"react-icons/md\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"../../redux/store\";\r\nimport { deleteTodo, editTodoStatus } from \"../../redux/operations\";\r\nimport { selectUser } from \"../../redux/selectors\";\r\n\r\nexport const TodoCard: FC<TodoData> = ({\r\n  id,\r\n  title,\r\n  text,\r\n  deadline,\r\n  completed,\r\n}) => {\r\n  const { isShowModal, openModal, closeModal } = useShowModal();\r\n  const [isCompleted, setIsCompleted] = useState(completed);\r\n  const { id: userId } = useSelector(selectUser);\r\n  const dispatch: AppDispatch = useDispatch();\r\n\r\n  const handleComplete = () => {\r\n    setIsCompleted((prev) => !prev);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    dispatch(deleteTodo({ id, userId }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(editTodoStatus({ todo: { id, completed: isCompleted }, userId }));\r\n  }, [dispatch, isCompleted, id, userId]);\r\n\r\n  return (\r\n    <>\r\n      <li>\r\n        <h6>{title}</h6>\r\n        <p>{text}</p>\r\n        <p>{deadline}</p>\r\n        <p>{isCompleted ? \"completed\" : \"active\"}</p>\r\n        <button\r\n          type=\"button\"\r\n          aria-label=\"toggle complete task\"\r\n          onClick={handleComplete}\r\n        >\r\n          {isCompleted ? (\r\n            <MdOutlineCheckBox />\r\n          ) : (\r\n            <MdOutlineCheckBoxOutlineBlank />\r\n          )}\r\n        </button>\r\n        <button type=\"button\" onClick={openModal}>\r\n          Edit task\r\n        </button>\r\n        <button type=\"button\" onClick={handleDelete}>\r\n          Delete task\r\n        </button>\r\n      </li>\r\n\r\n      {isShowModal && (\r\n        <AddTodoModal\r\n          closeModal={closeModal}\r\n          isEdit\r\n          todoId={id}\r\n          title={title}\r\n          text={text}\r\n          deadline={deadline}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { TodoData } from \"../../redux/slices/todosSlice\";\r\nimport { TodoCard } from \"../TodoCard/TodoCard\";\r\n\r\ninterface ListProps {\r\n  todos: TodoData[];\r\n}\r\n\r\nexport const TodoList: FC<ListProps> = ({ todos }) => {\r\n  return (\r\n    <ul>\r\n      {todos.map(({ id, title, text, deadline, completed }) => (\r\n        <TodoCard\r\n          key={id}\r\n          id={id}\r\n          title={title}\r\n          text={text}\r\n          deadline={deadline}\r\n          completed={completed}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport const useShowModal = () => {\r\n  const [isShowModal, setIsShowModal] = useState(false);\r\n\r\n  const openModal: () => void = () => {\r\n    setIsShowModal(true);\r\n    document.body.style.overflow = \"hidden\";\r\n  };\r\n\r\n  const closeModal: () => void = () => {\r\n    setIsShowModal(false);\r\n    document.body.style.overflow = \"\";\r\n  };\r\n\r\n  return { isShowModal, openModal, closeModal };\r\n};\r\n","import { FC } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectCompletedTodos } from \"../redux/selectors\";\r\nimport { TodoList } from \"../components/TodoList/TodoList\";\r\n\r\nconst CompletedPage: FC = () => {\r\n  const todos = useSelector(selectCompletedTodos);\r\n\r\n  return (\r\n    <>\r\n      {!todos.length ? (\r\n        <p>You have no completed tasks yet</p>\r\n      ) : (\r\n        <>\r\n          <h2>Here are all of your completed tasks:</h2>\r\n          <TodoList todos={todos} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompletedPage;\r\n"],"names":["styled","div","_templateObject","_taggedTemplateLiteral","fadeInScale","Backdrop","_templateObject2","formatDate","deadline","day","getDate","toString","padStart","month","getMonth","year","getFullYear","concat","formatDateToObject","split","Date","Number","modalRoot","document","querySelector","validationSchema","yup","shape","title","min","max","required","text","AddTodoModal","_ref","closeModal","isEdit","todoId","dispatch","useDispatch","id","userId","useSelector","selectUser","useEffect","handleCloseByEsc","e","code","window","addEventListener","removeEventListener","initialValues","undefined","createPortal","_jsxs","onClick","target","currentTarget","children","_jsx","type","Formik","onSubmit","async","todoPayload","todo","todoData","completed","nanoid","editTodo","addTodo","_ref2","setFieldValue","values","Form","Field","name","placeholder","ReactDatePicker","placeholderText","selected","onChange","date","autoComplete","dateFormat","calendarStartDay","ErrorMessage","component","TodoCard","isShowModal","openModal","useShowModal","isCompleted","setIsCompleted","useState","editTodoStatus","_Fragment","handleComplete","prev","MdOutlineCheckBox","MdOutlineCheckBoxOutlineBlank","handleDelete","deleteTodo","TodoList","todos","map","setIsShowModal","body","style","overflow","CompletedPage","selectCompletedTodos","length"],"sourceRoot":""}