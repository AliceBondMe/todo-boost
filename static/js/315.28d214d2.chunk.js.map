{"version":3,"file":"static/js/315.28d214d2.chunk.js","mappings":"iOAkBA,MAAMA,EAA8B,CAClCC,MAAO,GACPC,SAAU,IAGNC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CJ,MAAOG,EAAAA,KAEJH,MAAM,4BACNK,SAAS,wBACZJ,SAAUE,EAAAA,KAEPG,IAAI,EAAG,8CACPD,SAAS,4BAGDE,EAAqCC,IAAkB,IAAjB,QAAEC,GAASD,EAC5D,MAAOE,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjCC,GAAwBC,EAAAA,EAAAA,MAoC9B,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKP,EAAU,cAAgB,iBAC/BQ,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLnB,cAAeA,EACfG,iBAAkBA,EAClBiB,SAxCeC,MAAAC,EAAAC,KAGf,IAFJ,MAAEtB,EAAK,SAAEC,GAAwBoB,GACjC,UAAEE,GAAwCD,EAE1C,IACE,MAIME,GAJiBf,QACbgB,EAAAA,EAAAA,IAA2BC,EAAAA,EAAM1B,EAAOC,SACxC0B,EAAAA,EAAAA,IAA+BD,EAAAA,EAAM1B,EAAOC,IAE1BuB,KAE5BI,QAAQC,IAAI,SAAUL,GAEtBX,GACEiB,EAAAA,EAAAA,IAAM,CACJ9B,QACA+B,GAAIP,EAAKQ,IACTC,MAAOT,EAAKU,gBAIXzB,SACG0B,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASb,EAAKQ,KAAM,CACvChC,QACAgC,IAAKR,EAAKQ,KAGhB,CAAE,MACArB,GAAW,EACb,CAEAY,GAAW,EASgBP,UAEvBD,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAAtB,SAAA,EACHC,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CAACC,KAAK,QAAQC,KAAK,QAAQC,YAAY,QAAQrC,UAAQ,KAC7DY,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CACJC,KAAK,WACLC,KAAK,WACLC,YAAY,WACZrC,UAAQ,KAGVY,EAAAA,EAAAA,KAAA,UAAQuB,KAAK,SAAQxB,SAAEP,EAAU,SAAW,cAE5CQ,EAAAA,EAAAA,KAAC0B,EAAAA,GAAY,CAACF,KAAK,QAAQG,UAAU,SACrC3B,EAAAA,EAAAA,KAAC0B,EAAAA,GAAY,CAACF,KAAK,WAAWG,UAAU,aAI3ClC,IACCO,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wEAED,EC5EV,EApBqB6B,KACnB,MAAOpC,EAASqC,IAAclC,EAAAA,EAAAA,WAAS,GAMvC,OACEG,EAAAA,EAAAA,MAAAgC,EAAAA,SAAA,CAAA/B,SAAA,EACEC,EAAAA,EAAAA,KAACV,EAAQ,CAACE,QAASA,KACnBM,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAIP,EAAU,kBAAoB,8BAClCQ,EAAAA,EAAAA,KAAA,UAAQ+B,QATSC,KACrBH,GAAYI,IAAUA,GAAK,EAQSlC,SAC7BP,EAAU,UAAY,iBAG1B,C","sources":["components/Auth/AuthForm.tsx","pages/AuthPage.tsx"],"sourcesContent":["import * as yup from \"yup\";\r\nimport { ErrorMessage, Field, Form, Formik, FormikHelpers } from \"formik\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n} from \"firebase/auth\";\r\nimport { auth, db } from \"../../firebase\";\r\nimport { FC, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login } from \"../../redux/slices/authSlice\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport { AppDispatch } from \"../../redux/store\";\r\n\r\nexport interface UserAuthData {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst initialValues: UserAuthData = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst validationSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .email(\"Please enter valid email\")\r\n    .required(\"An email is required\"),\r\n  password: yup\r\n    .string()\r\n    .min(5, \"Password must contain 5 or more characters\")\r\n    .required(\"A password is required\"),\r\n});\r\n\r\nexport const AuthForm: FC<{ isLogin: boolean }> = ({ isLogin }) => {\r\n  const [isError, setIsError] = useState(false);\r\n  const dispatch: AppDispatch = useDispatch();\r\n\r\n  const handleSubmit = async (\r\n    { email, password }: UserAuthData,\r\n    { resetForm }: FormikHelpers<UserAuthData>\r\n  ) => {\r\n    try {\r\n      const userCredential = isLogin\r\n        ? await signInWithEmailAndPassword(auth, email, password)\r\n        : await createUserWithEmailAndPassword(auth, email, password);\r\n\r\n      const user = userCredential.user;\r\n\r\n      console.log(\"user: \", user);\r\n\r\n      dispatch(\r\n        login({\r\n          email,\r\n          id: user.uid,\r\n          token: user.refreshToken,\r\n        })\r\n      );\r\n\r\n      if (!isLogin) {\r\n        await setDoc(doc(db, \"users\", user.uid), {\r\n          email,\r\n          uid: user.uid,\r\n        });\r\n      }\r\n    } catch {\r\n      setIsError(true);\r\n    }\r\n\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{isLogin ? \"Sign in now\" : \"Sign up now\"}</h2>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Form>\r\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" required />\r\n          <Field\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n\r\n          <button type=\"submit\">{isLogin ? \"Log in\" : \"Register\"}</button>\r\n\r\n          <ErrorMessage name=\"email\" component=\"div\" />\r\n          <ErrorMessage name=\"password\" component=\"div\" />\r\n        </Form>\r\n      </Formik>\r\n\r\n      {isError && (\r\n        <p>Something went wrong with your authentification. Please try again</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { AuthForm } from \"../components/Auth/AuthForm\";\r\nimport { useState } from \"react\";\r\n\r\nconst RegisterPage = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n\r\n  const toggleAuthType = () => {\r\n    setIsLogin((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AuthForm isLogin={isLogin} />\r\n      <div>\r\n        <p>{isLogin ? \"Not registered?\" : \"Already have an account?\"}</p>\r\n        <button onClick={toggleAuthType}>\r\n          {isLogin ? \"Sign up\" : \"Sign in\"}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n"],"names":["initialValues","email","password","validationSchema","yup","shape","required","min","AuthForm","_ref","isLogin","isError","setIsError","useState","dispatch","useDispatch","_jsxs","children","_jsx","Formik","onSubmit","async","_ref2","_ref3","resetForm","user","signInWithEmailAndPassword","auth","createUserWithEmailAndPassword","console","log","login","id","uid","token","refreshToken","setDoc","doc","db","Form","Field","type","name","placeholder","ErrorMessage","component","RegisterPage","setIsLogin","_Fragment","onClick","toggleAuthType","prev"],"sourceRoot":""}