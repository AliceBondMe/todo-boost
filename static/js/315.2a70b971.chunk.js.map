{"version":3,"file":"static/js/315.2a70b971.chunk.js","mappings":"oNAiBA,MAAMA,EAA8B,CAClCC,MAAO,GACPC,SAAU,IAGNC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CJ,MAAOG,EAAAA,KAEJH,MAAM,4BACNK,SAAS,wBACZJ,SAAUE,EAAAA,KAEPG,IAAI,EAAG,8CACPD,SAAS,4BAGDE,EAAqCC,IAAkB,IAAjB,QAAEC,GAASD,EAC5D,MAAOE,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjCC,GAAWC,EAAAA,EAAAA,MAoCjB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKP,EAAU,cAAgB,iBAC/BQ,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLnB,cAAeA,EACfG,iBAAkBA,EAClBiB,SAxCeC,MAAAC,EAAAC,KAGf,IAFJ,MAAEtB,EAAK,SAAEC,GAAwBoB,GACjC,UAAEE,GAAwCD,EAE1C,IACE,MAIME,GAJiBf,QACbgB,EAAAA,EAAAA,IAA2BC,EAAAA,EAAM1B,EAAOC,SACxC0B,EAAAA,EAAAA,IAA+BD,EAAAA,EAAM1B,EAAOC,IAE1BuB,KAE5BI,QAAQC,IAAI,SAAUL,GAEtBX,GACEiB,EAAAA,EAAAA,IAAM,CACJ9B,QACA+B,GAAIP,EAAKQ,IACTC,MAAOT,EAAKU,gBAIXzB,SACG0B,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASb,EAAKQ,KAAM,CACvChC,QACAgC,IAAKR,EAAKQ,KAGhB,CAAE,MACArB,GAAW,EACb,CAEAY,GAAW,EASgBP,UAEvBD,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAAtB,SAAA,EACHC,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CAACC,KAAK,QAAQC,KAAK,QAAQC,YAAY,QAAQrC,UAAQ,KAC7DY,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CACJC,KAAK,WACLC,KAAK,WACLC,YAAY,WACZrC,UAAQ,KAGVY,EAAAA,EAAAA,KAAA,UAAQuB,KAAK,SAAQxB,SAAEP,EAAU,SAAW,cAE5CQ,EAAAA,EAAAA,KAAC0B,EAAAA,GAAY,CAACF,KAAK,QAAQG,UAAU,SACrC3B,EAAAA,EAAAA,KAAC0B,EAAAA,GAAY,CAACF,KAAK,WAAWG,UAAU,aAI3ClC,IACCO,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wEAED,EC3EV,EApBqB6B,KACnB,MAAOpC,EAASqC,IAAclC,EAAAA,EAAAA,WAAS,GAMvC,OACEG,EAAAA,EAAAA,MAAAgC,EAAAA,SAAA,CAAA/B,SAAA,EACEC,EAAAA,EAAAA,KAACV,EAAQ,CAACE,QAASA,KACnBM,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAIP,EAAU,kBAAoB,8BAClCQ,EAAAA,EAAAA,KAAA,UAAQ+B,QATSC,KACrBH,GAAYI,IAAUA,GAAK,EAQSlC,SAC7BP,EAAU,UAAY,iBAG1B,C","sources":["components/Auth/AuthForm.tsx","pages/AuthPage.tsx"],"sourcesContent":["import * as yup from \"yup\";\nimport { ErrorMessage, Field, Form, Formik, FormikHelpers } from \"formik\";\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { auth, db } from \"../../firebase\";\nimport { FC, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"../../redux/slices/authSlice\";\nimport { doc, setDoc } from \"firebase/firestore\";\n\nexport interface UserAuthData {\n  email: string;\n  password: string;\n}\n\nconst initialValues: UserAuthData = {\n  email: \"\",\n  password: \"\",\n};\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"Please enter valid email\")\n    .required(\"An email is required\"),\n  password: yup\n    .string()\n    .min(8, \"Password must contain 8 or more characters\")\n    .required(\"A password is required\"),\n});\n\nexport const AuthForm: FC<{ isLogin: boolean }> = ({ isLogin }) => {\n  const [isError, setIsError] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (\n    { email, password }: UserAuthData,\n    { resetForm }: FormikHelpers<UserAuthData>\n  ) => {\n    try {\n      const userCredential = isLogin\n        ? await signInWithEmailAndPassword(auth, email, password)\n        : await createUserWithEmailAndPassword(auth, email, password);\n\n      const user = userCredential.user;\n\n      console.log(\"user: \", user);\n\n      dispatch(\n        login({\n          email,\n          id: user.uid,\n          token: user.refreshToken,\n        })\n      );\n\n      if (!isLogin) {\n        await setDoc(doc(db, \"users\", user.uid), {\n          email,\n          uid: user.uid,\n        });\n      }\n    } catch {\n      setIsError(true);\n    }\n\n    resetForm();\n  };\n\n  return (\n    <div>\n      <h2>{isLogin ? \"Sign in now\" : \"Sign up now\"}</h2>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" required />\n          <Field\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            required\n          />\n\n          <button type=\"submit\">{isLogin ? \"Log in\" : \"Register\"}</button>\n\n          <ErrorMessage name=\"email\" component=\"div\" />\n          <ErrorMessage name=\"password\" component=\"div\" />\n        </Form>\n      </Formik>\n\n      {isError && (\n        <p>Something went wrong with your authentification. Please try again</p>\n      )}\n    </div>\n  );\n};\n","import { AuthForm } from \"../components/Auth/AuthForm\";\nimport { useState } from \"react\";\n\nconst RegisterPage = () => {\n  const [isLogin, setIsLogin] = useState(true);\n\n  const toggleAuthType = () => {\n    setIsLogin((prev) => !prev);\n  };\n\n  return (\n    <>\n      <AuthForm isLogin={isLogin} />\n      <div>\n        <p>{isLogin ? \"Not registered?\" : \"Already have an account?\"}</p>\n        <button onClick={toggleAuthType}>\n          {isLogin ? \"Sign up\" : \"Sign in\"}\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["initialValues","email","password","validationSchema","yup","shape","required","min","AuthForm","_ref","isLogin","isError","setIsError","useState","dispatch","useDispatch","_jsxs","children","_jsx","Formik","onSubmit","async","_ref2","_ref3","resetForm","user","signInWithEmailAndPassword","auth","createUserWithEmailAndPassword","console","log","login","id","uid","token","refreshToken","setDoc","doc","db","Form","Field","type","name","placeholder","ErrorMessage","component","RegisterPage","setIsLogin","_Fragment","onClick","toggleAuthType","prev"],"sourceRoot":""}