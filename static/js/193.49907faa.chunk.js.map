{"version":3,"file":"static/js/193.49907faa.chunk.js","mappings":"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","sources":["components/AddTodo/AddTodoBlock.tsx","components/AddTodo/AddTodoModal.styled.jsx","helpers/formatDate.ts","components/AddTodo/AddTodoModal.tsx","components/TodoCard/TodoCard.styled.tsx","components/TodoCard/TodoCard.tsx","components/TodoList/TodoList.styled.tsx","components/TodoList/TodoList.tsx","hooks/useShowModal.ts","pages/AllTodosPage.tsx","pages/Pages.styled.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../redux/selectors\";\nimport { Link } from \"react-router-dom\";\nimport { useShowModal } from \"../../hooks/useShowModal\";\nimport { AddTodoModal } from \"./AddTodoModal\";\nimport { AddTodoButton } from \"./AddTodoModal.styled\";\n\nexport const AddTodoBlock: FC = () => {\n  const { id } = useSelector(selectUser);\n  const { isShowModal, openModal, closeModal } = useShowModal();\n\n  return (\n    <>\n      {!id && <Link to=\"/auth\">Please Sign in to create tasks</Link>}\n\n      <AddTodoButton\n        type=\"button\"\n        onClick={openModal}\n        disabled={!id}\n        style={{ marginLeft: \"50%\" }}\n      >\n        Add new task\n      </AddTodoButton>\n\n      {isShowModal && <AddTodoModal closeModal={closeModal} />}\n    </>\n  );\n};\n","import { ErrorMessage, Field, Form } from \"formik\";\nimport { fadeInScale } from \"../../assets/styles/GlobalStyles\";\nimport styled from \"styled-components\";\nimport ReactDatePicker from \"react-datepicker\";\nimport { Button } from \"../Auth/Auth.styled\";\n\nexport const ModalContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 600px;\n  min-height: 400px;\n  border-radius: 20px;\n  padding: 20px;\n  background-color: #ffffff;\n  animation: ${fadeInScale} 700ms ease-in-out;\n\n  & button {\n    align-self: end;\n    background-color: transparent;\n  }\n\n  & svg {\n    color: var(--bg-accent-dark);\n    transition: color var(--transition-main);\n\n    &:hover {\n      color: var(--text-main);\n    }\n  }\n`;\n\nexport const Backdrop = styled.div`\n  z-index: 1200;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--backdrop);\n`;\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 16px;\n  gap: 20px;\n\n  & button {\n    align-self: center;\n  }\n`;\n\nexport const FieldStyled = styled(Field)`\n  width: 480px;\n  padding: 12px;\n  border-radius: 12px;\n  border: none;\n  background-color: var(--bg-accent-lighter);\n\n  &:focus {\n    outline: 2px solid var(--bg-accent);\n  }\n`;\n\nexport const DatePickerStyled = styled(ReactDatePicker)`\n  width: 480px;\n  padding: 12px;\n  border-radius: 12px;\n  border: none;\n  background-color: var(--bg-accent-lighter);\n\n  &:focus {\n    outline: 2px solid var(--bg-accent);\n  }\n`;\n\nexport const ErrorMessageStyled = styled(ErrorMessage)`\n  color: var(--bg-accent-dark);\n`;\n\nexport const AddTodoButton = styled(Button)`\n  position: fixed;\n  bottom: 40px;\n`;\n","export const formatDate = (deadline: Date | undefined): string => {\n  if (!deadline) return \"\";\n  const day = deadline.getDate().toString().padStart(2, \"0\");\n  const month = (deadline.getMonth() + 1).toString().padStart(2, \"0\");\n  const year = deadline.getFullYear().toString();\n  const formattedDate = `${day}/${month}/${year}`;\n  return formattedDate;\n};\n\nexport const formatDateToObject = (\n  deadline: string | undefined\n): Date | undefined => {\n  if (deadline === \"\" || !deadline) return undefined;\n  const [day, month, year] = deadline.split(\"/\");\n  const dateObject = new Date(Number(year), Number(month) - 1, Number(day));\n  return dateObject;\n};\n","import { FC, SyntheticEvent, useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport {\n  Backdrop,\n  DatePickerStyled,\n  ErrorMessageStyled,\n  FieldStyled,\n  FormStyled,\n  ModalContainer,\n} from \"./AddTodoModal.styled\";\nimport { Formik } from \"formik\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../../redux/selectors\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { AppDispatch } from \"../../redux/store\";\nimport { addTodo, editTodo } from \"../../redux/operations\";\nimport { formatDate, formatDateToObject } from \"../../helpers/formatDate\";\nimport { IoClose } from \"react-icons/io5\";\nimport { ActionButton } from \"../TodoCard/TodoCard.styled\";\n\nconst modalRoot = document.querySelector(\"#modal-root\") as HTMLElement;\n\nexport interface TodoDataOut {\n  title: string;\n  text: string;\n  deadline: Date | undefined;\n}\n\ninterface AddTodoModalProps {\n  closeModal: () => void;\n  isEdit?: boolean;\n  todoId?: string;\n  title?: string;\n  text?: string;\n  deadline?: string;\n}\n\nconst validationSchema = yup.object().shape({\n  title: yup\n    .string()\n    .min(3)\n    .max(100)\n    .required(\"A Title for new task is required\"),\n  deadline: yup.date().required(\"A deadline is required\"),\n  text: yup.string().max(500),\n});\n\nexport const AddTodoModal: FC<AddTodoModalProps> = ({\n  closeModal,\n  isEdit = false,\n  todoId,\n  title,\n  text,\n  deadline,\n}) => {\n  const dispatch: AppDispatch = useDispatch();\n  const { id: userId } = useSelector(selectUser);\n\n  const handleBackdropClose = (e: SyntheticEvent) => {\n    if (e.target === e.currentTarget) {\n      closeModal();\n    }\n  };\n\n  useEffect(() => {\n    const handleCloseByEsc = (e: KeyboardEvent) => {\n      if (e.code === \"Escape\") {\n        closeModal();\n      }\n    };\n    window.addEventListener(\"keydown\", handleCloseByEsc);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleCloseByEsc);\n    };\n  }, [closeModal]);\n\n  const handleSubmit = async (todoData: TodoDataOut) => {\n    const todoPayload = {\n      userId,\n      todo: {\n        ...todoData,\n        deadline: formatDate(todoData.deadline),\n        completed: false,\n        id: isEdit ? (todoId as string) : nanoid(),\n      },\n    };\n\n    isEdit ? dispatch(editTodo(todoPayload)) : dispatch(addTodo(todoPayload));\n\n    closeModal();\n  };\n\n  const initialValues: TodoDataOut = {\n    title: isEdit ? (title as string) : \"\",\n    text: isEdit ? (text as string) : \"\",\n    deadline: isEdit ? formatDateToObject(deadline) : undefined,\n  };\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClose}>\n      <ModalContainer>\n        <button\n          type=\"button\"\n          aria-label=\"close modal window\"\n          onClick={closeModal}\n        >\n          <IoClose size={28} />\n        </button>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ setFieldValue, values, handleChange }) => (\n            <FormStyled>\n              <FieldStyled\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Title\"\n                required\n              />\n              <FieldStyled\n                as=\"textarea\"\n                type=\"text\"\n                name=\"text\"\n                placeholder=\"Description\"\n                onChange={handleChange}\n              />\n              <DatePickerStyled\n                name=\"deadline\"\n                placeholderText=\"Deadline\"\n                selected={values.deadline}\n                onChange={(date) => setFieldValue(\"deadline\", date)}\n                autoComplete=\"off\"\n                dateFormat=\"dd/MM/yyyy\"\n                calendarStartDay={1}\n                required\n              />\n\n              <ActionButton type=\"submit\">\n                {isEdit ? \"Edit task\" : \"Create new task\"}\n              </ActionButton>\n\n              <ErrorMessageStyled name=\"title\" component=\"div\" />\n              <ErrorMessageStyled name=\"text\" component=\"div\" />\n              <ErrorMessageStyled name=\"deadline\" component=\"div\" />\n            </FormStyled>\n          )}\n        </Formik>\n      </ModalContainer>\n    </Backdrop>,\n    modalRoot\n  );\n};\n","import styled from \"styled-components\";\n\ninterface CardProps {\n  $isCompleted: boolean;\n}\n\nexport const Card = styled.div<CardProps>`\n  display: flex;\n  flex-direction: column;\n  width: 600px;\n  min-height: 160px;\n  padding: 20px;\n  border-radius: 24px;\n  background-color: ${({ $isCompleted }) =>\n    $isCompleted ? \"var(--bg-grey)\" : \"var(--bg-accent-lighter)\"};\n\n  & .deadline {\n    align-self: flex-end;\n    font-style: bold;\n    font-size: 18px;\n    color: var(--bg-accent-dark);\n  }\n\n  & .text {\n    width: 500px;\n    overflow-wrap: break-word;\n  }\n`;\n\nexport const TitleBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  & button {\n    background-color: transparent;\n  }\n\n  & svg {\n    color: var(--bg-accent-dark);\n    transition: color var(--transition-main);\n\n    &:hover {\n      color: var(--text-main);\n    }\n  }\n\n  & h6 {\n    font-size: 20px;\n    font-style: bold;\n  }\n`;\n\nexport const ActionButton = styled.button`\n  padding: 8px;\n  margin-right: 12px;\n  width: 160px;\n  border-radius: 30px;\n  border: 1px solid var(--bg-accent-dark);\n  background-color: transparent;\n  transition: all var(--transition-main);\n\n  &:hover {\n    color: var(--text-white);\n    background-color: var(--bg-accent-dark);\n  }\n`;\n","import { FC, useEffect, useState } from \"react\";\nimport { TodoData } from \"../../redux/slices/todosSlice\";\nimport { useShowModal } from \"../../hooks/useShowModal\";\nimport { AddTodoModal } from \"../AddTodo/AddTodoModal\";\nimport {\n  MdOutlineCheckBox,\n  MdOutlineCheckBoxOutlineBlank,\n} from \"react-icons/md\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch } from \"../../redux/store\";\nimport { deleteTodo, editTodoStatus } from \"../../redux/operations\";\nimport { selectUser } from \"../../redux/selectors\";\nimport { ActionButton, Card, TitleBlock } from \"./TodoCard.styled\";\n\nexport const TodoCard: FC<TodoData> = ({\n  id,\n  title,\n  text,\n  deadline,\n  completed,\n}) => {\n  const { isShowModal, openModal, closeModal } = useShowModal();\n  const [isCompleted, setIsCompleted] = useState(completed);\n  const { id: userId } = useSelector(selectUser);\n  const dispatch: AppDispatch = useDispatch();\n\n  const handleComplete = () => {\n    setIsCompleted((prev) => !prev);\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteTodo({ id, userId }));\n  };\n\n  useEffect(() => {\n    dispatch(editTodoStatus({ todo: { id, completed: isCompleted }, userId }));\n  }, [dispatch, isCompleted, id, userId]);\n\n  return (\n    <>\n      <Card $isCompleted={isCompleted}>\n        <TitleBlock>\n          <h6>{title}</h6>\n          <button\n            type=\"button\"\n            aria-label=\"toggle complete task\"\n            onClick={handleComplete}\n          >\n            {isCompleted ? (\n              <MdOutlineCheckBox size={32} />\n            ) : (\n              <MdOutlineCheckBoxOutlineBlank size={32} />\n            )}\n          </button>\n        </TitleBlock>\n\n        <p className=\"text\">{text}</p>\n        <p className=\"deadline\">{deadline}</p>\n\n        <div>\n          <ActionButton type=\"button\" onClick={openModal}>\n            Edit task\n          </ActionButton>\n          <ActionButton type=\"button\" onClick={handleDelete}>\n            Delete task\n          </ActionButton>\n        </div>\n      </Card>\n\n      {isShowModal && (\n        <AddTodoModal\n          closeModal={closeModal}\n          isEdit\n          todoId={id}\n          title={title}\n          text={text}\n          deadline={deadline}\n        />\n      )}\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0 36px 0 36px;\n\n  & ul {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n\n  & img {\n    position: fixed;\n    top: 25%;\n    right: 15%;\n    width: 320px;\n    height: 320px;\n  }\n`;\n","import { FC } from \"react\";\nimport { TodoData } from \"../../redux/slices/todosSlice\";\nimport { TodoCard } from \"../TodoCard/TodoCard\";\nimport paperNotes from \"../../assets/images/paper-pile.png\";\nimport { Container } from \"./TodoList.styled\";\n\ninterface ListProps {\n  todos: TodoData[];\n}\n\nexport const TodoList: FC<ListProps> = ({ todos }) => {\n  return (\n    <Container>\n      <ul>\n        {todos.map(({ id, title, text, deadline, completed }) => (\n          <TodoCard\n            key={id}\n            id={id}\n            title={title}\n            text={text}\n            deadline={deadline}\n            completed={completed}\n          />\n        ))}\n      </ul>\n      <img src={paperNotes} alt=\"pile of paper notes\" />\n    </Container>\n  );\n};\n","import { useState } from \"react\";\n\nexport const useShowModal = () => {\n  const [isShowModal, setIsShowModal] = useState(false);\n\n  const openModal: () => void = () => {\n    setIsShowModal(true);\n    document.body.style.overflow = \"hidden\";\n  };\n\n  const closeModal: () => void = () => {\n    setIsShowModal(false);\n    document.body.style.overflow = \"\";\n  };\n\n  return { isShowModal, openModal, closeModal };\n};\n","import \"react-datepicker/dist/react-datepicker.css\";\nimport { FC, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectTodos, selectUser } from \"../redux/selectors\";\nimport { fetchTodos } from \"../redux/operations\";\nimport { AppDispatch } from \"../redux/store\";\nimport { TodoList } from \"../components/TodoList/TodoList\";\nimport { AddTodoBlock } from \"../components/AddTodo/AddTodoBlock\";\nimport { Header } from \"./Pages.styled\";\n\nconst AllTodosPage: FC = () => {\n  const { id } = useSelector(selectUser);\n  const todos = useSelector(selectTodos);\n  const dispatch: AppDispatch = useDispatch();\n\n  useEffect(() => {\n    if (id) {\n      dispatch(fetchTodos(id));\n    }\n  }, [dispatch, id]);\n\n  return (\n    <>\n      <AddTodoBlock />\n\n      {!todos.length ? (\n        <p>You have no tasks yet</p>\n      ) : (\n        <>\n          <Header>Here are all of your tasks:</Header>\n          <TodoList todos={todos} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AllTodosPage;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n\n  & img {\n    height: 75vh;\n    width: auto;\n  }\n`;\n\nexport const MessageBlock = styled.div`\n  display: flex;\n  justify-content: center;\n\n  & button {\n    color: var(--bg-accent-dark);\n    font-weight: bold;\n  }\n`;\n\nexport const Header = styled.h2`\n  margin-left: 48px;\n  margin-bottom: 24px;\n`;\n\nexport const HomeTextBlock = styled.div`\n  width: 500px;\n`;\n\nexport const HeaderNotFound = styled.h5`\n  font-size: 36px;\n  width: 400px;\n`;\n"],"names":["AddTodoBlock","id","useSelector","selectUser","isShowModal","openModal","closeModal","useShowModal","_jsxs","_Fragment","children","_jsx","Link","to","AddTodoButton","type","onClick","disabled","style","marginLeft","AddTodoModal","ModalContainer","styled","div","_templateObject","_taggedTemplateLiteral","fadeInScale","Backdrop","_templateObject2","FormStyled","Form","_templateObject3","FieldStyled","Field","_templateObject4","DatePickerStyled","ReactDatePicker","_templateObject5","ErrorMessageStyled","ErrorMessage","_templateObject6","Button","_templateObject7","formatDate","deadline","day","getDate","toString","padStart","month","getMonth","year","getFullYear","concat","formatDateToObject","split","Date","Number","modalRoot","document","querySelector","validationSchema","yup","shape","title","min","max","required","text","_ref","isEdit","todoId","dispatch","useDispatch","userId","useEffect","handleCloseByEsc","e","code","window","addEventListener","removeEventListener","initialValues","undefined","createPortal","target","currentTarget","IoClose","size","Formik","onSubmit","async","todoPayload","todo","todoData","completed","nanoid","editTodo","addTodo","_ref2","setFieldValue","values","handleChange","name","placeholder","as","onChange","placeholderText","selected","date","autoComplete","dateFormat","calendarStartDay","ActionButton","component","Card","$isCompleted","TitleBlock","button","TodoCard","isCompleted","setIsCompleted","useState","editTodoStatus","handleComplete","prev","MdOutlineCheckBox","MdOutlineCheckBoxOutlineBlank","className","handleDelete","deleteTodo","Container","TodoList","todos","map","src","paperNotes","alt","setIsShowModal","body","overflow","AllTodosPage","selectTodos","fetchTodos","length","Header","MessageBlock","h2","HomeTextBlock","HeaderNotFound","h5"],"sourceRoot":""}